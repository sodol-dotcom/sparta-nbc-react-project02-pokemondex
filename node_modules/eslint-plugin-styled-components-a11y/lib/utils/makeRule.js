"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _require = require('eslint-plugin-jsx-a11y'),
  rules = _require.rules;
var path = require('path');
var collectStyledComponentData = require(process.env.NODE_ENV === 'test' ? '../../lib/utils/collectStyledComponentData.js' : './collectStyledComponentData');
var ruleNameToTypeDict = require('./ruleNameToTypeDict');
module.exports = function (name) {
  var _rules$name;
  return {
    meta: (_rules$name = rules[name]) === null || _rules$name === void 0 ? void 0 : _rules$name.meta,
    create: function create(context) {
      var nodeParserPath = path.join(__dirname, 'nodeParsers', ruleNameToTypeDict[name]);
      var rule = rules[name];
      var styledComponents = {};
      var nodesArray = [];
      var parserMapping = {
        JSXOpeningElement: 'JSXOpeningElement',
        JSXElement: 'JSXElement',
        JSXAttribute: 'JSXOpeningElement'
      };
      var parsedElement = parserMapping[ruleNameToTypeDict[name]];
      return _objectSpread(_objectSpread({}, collectStyledComponentData(styledComponents, context, name)), {}, _defineProperty(_defineProperty({}, parsedElement, function (node) {
        return nodesArray.push(node);
      }), 'Program:exit', function ProgramExit() {
        var parser = require(nodeParserPath)(context, styledComponents, rule, name);
        nodesArray.forEach(function (node) {
          return parser[parsedElement](node);
        });
      }));
    }
  };
};